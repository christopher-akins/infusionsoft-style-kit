//
// INFUSIONSOFT FUNCTIONS AND MIXINS
//

// LIST OF FUNCTIONS:

// 1. STRIP UNIT - From Vendor Foundation
// 2. CONVERT TO REM - From Vendor Foundation
// 3. REM-CALC - From Vendor Foundation
// 4. adjustPadding - Increases or decreases padding's value
// 5. darkenColor - Darkens initial color value by 10%
// 6. lightenColor - Lightens initial color value by 10%, 25%, 50%, 75%

// Foundation Rem-Calc Function

// This is the default html and body font-size for the base rem value.
$rem-base: 16px !default;

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}


// A function that increases or decreases padding sizes
//
// @param $defaultPadding = the standard padding used
// @param $expression = takes 'add' or 'subtract'
// @param $val = increment/decrement value

@function adjustPadding($defaultPadding, $expression, $val) {
  @if $expression == 'add' {
    @return $defaultPadding + $val;
  } @else if $expression == 'subtract' {
    @return $defaultPadding - $val;
  } @else {
    @warn "padding remained at default";
    @return $defaultPadding;
  }
}


// Proper color tinting (darken/lighten) functionality to fit our brand standards
//
// @param $color = value of a color (rgba, hex, etc.)
// @param $amount = 10%
// @return $color with adjustments (defaults to same as input color if invalid amount provided)
@function darkenColor($color, $amount: 0){
  @if $amount == 10% {
    // takes a 20% opacity black and averages with the full color, then ensures full opacity
    @return adjust_color(mix($color, adjust-color(#000, $alpha: -0.8)), $alpha: 1);
  }
  // when the requested amount doesn't match standards, return the base color
  @return $color;
}

// Lighten Color by base percentage
//
// @param $color = value of a color (rgba, hex, etc.)
// @param $amount = 75%, 50%, 25%, 10%
// @return $color with adjustments (defaults to same as input color if invalid amount provided)
@function lightenColor($color, $amount: 0){
  @if $amount == 75% {
    // takes a 50% white and averages with the full color to get 75% color, then ensures full opacity
    @return adjust_color(mix($color, adjust-color(#fff, $alpha: -0.5)), $alpha: 1);
  }
  @if $amount == 50% {
    // takes white and averages with the full color to get 50% color, then ensures full opacity
    @return adjust_color(mix($color, #fff), $alpha: 1);
  }
  @if $amount == 25% {
    // takes 50% opacity color and averages with white to get 25% color, then ensures full opacity
    @return adjust_color(mix(adjust-color($color, $alpha: -0.5), #fff), $alpha: 1);
  }
  @if $amount == 10% {
    // takes 20% opacity color and averages with white to get 10% color, then ensures full opacity
    @return adjust_color(mix(adjust-color($color, $alpha: -0.8), #fff), $alpha: 1);
  }
  // when the requested amount doesn't match standards, return the base color
  @return $color;
}

//
// Add `$unit` to `$value`
//
// @param {Number} $value - Value to add unit to
// @param {String} $unit - String representation of the unit
//
// @return {Number} - `$value` expressed in `$unit`
//
@function toUnits($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @return $value * map-get($units, $unit);
}